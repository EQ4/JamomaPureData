# find_path(PD_MAIN_PATH /pd/)
message("PD_MAIN_PATH : ${PD_MAIN_PATH}")

if (PD_MAIN_PATH)
	message("finding m_pd.h")
	#find_path(PD_INCLUDE_DIRS m_pd.h "${PD_MAIN_PATH}/src/")
	if(EXISTS "${PD_MAIN_PATH}/src/m_pd.h" )
		set(PD_INCLUDE_DIRS "${PD_MAIN_PATH}/src/")
	else()
		set(PD_INCLUDE_DIRS PD_INCLUDE_DIRS-NOT_FOUND)
	endif()

	#pd.lib is needed in Win32
	#find_library(PD_LIBRARY NAMES pd.lib HINTS "${PD_MAIN_PATH}/bin/")
	if (WIN32)
		if(EXISTS "${PD_MAIN_PATH}/bin/pd.dll")
			set(PD_LIBRARY "${PD_MAIN_PATH}/bin/pd.dll")
		else()
			set(PD_LIBRARY PD_LIBRARY-NOT_FOUND)
		endif()
	endif(WIN32)
endif()

if (NOT PD_MAIN_PATH OR PD_INCLUDE_DIRS STREQUAL PD_INCLUDE_DIRS-NOT_FOUND)
	if (LINUX)
		find_path(PD_INCLUDE_DIRS m_pd.h HINTS "/usr/local/include/pd"  "/usr/include/pd" "/usr/include/pdextended")
	elseif (APPLE)
                find_path(PD_INCLUDE_DIRS m_pd.h HINTS "/Applications/Pd-*.app/Contents/Resources/src" "/Applications/Pd-extended.app/Contents/Resources/include")
	endif (LINUX)
endif()

if (PD_INCLUDE_DIRS)
	set(PD_FOUND TRUE)
endif (PD_INCLUDE_DIRS)

if (PD_FOUND)
	if (NOT PD_FIND_QUIETLY)
		message (STATUS "Found PD: ${PD_INCLUDE_DIRS}")
		if (WIN32)
			message (STATUS "Found PD lib: ${PD_LIBRARY}")
		endif (WIN32)
	endif (NOT PD_FIND_QUIETLY)
else (PD_FOUND)
	if (PD_FIND_REQUIRED)
		message (FATAL_ERROR "Could not find PD")
	endif (PD_FIND_REQUIRED)
endif (PD_FOUND)

mark_as_advanced(PD_INCLUDE_DIRS)
